package IC.Parser;

import IC.AST.*;
import IC.*;
import java.util.*;

/* Terminals */
terminal RB, LB, COMMA, RP, LP, LCBR, RCBR, SEMI;
terminal CLASS, CLASS_ID;
terminal String ID;
terminal STATIC, VOID, INT, STRING, BOOLEAN;

/* Non-Terminals */
nonterminal LibraryMethod libmethod;
nonterminal List<Method> libmethod_list;

nonterminal Formal formal;
nonterminal List<Formal> formal_list;

nonterminal ICClass libic;
nonterminal Type type;

precedence left LP, RP, LB, RB;

start with libic;

type ::= 
		INT:t 
 	 {: RESULT = (Type)(new PrimitiveType(tleft, DataTypes.INT)); :}  
 	 | BOOLEAN:t
 	 {: RESULT = (Type)(new PrimitiveType(tleft, DataTypes.BOOLEAN)); :} 
 	 | STRING:t
 	 {: RESULT = (Type)(new PrimitiveType(tleft, DataTypes.STRING)); :} 
 	 | type:t LB RB    /* array */ 
 	 {: t.incrementDimension(); RESULT = t; :}  ;

formal_list ::= formal:l
				{: List<Formal> lf = new ArrayList<Formal>(); lf.add(l); RESULT=lf;  :}
				| formal_list:l COMMA formal:m
				{: l.add(m); RESULT = l; :} ;

formal ::= type:t ID:n
        {: RESULT = new Formal(t, n); :} ;

libic ::= CLASS:c CLASS_ID LCBR libmethod_list:l RCBR
		{: RESULT = new ICClass(((Token)c).getLine(),"Library",new ArrayList<Field>(),l); :} ;

libmethod_list ::= libmethod:l
				{: List<Method> lf = new ArrayList<Method>(); lf.add(l); RESULT=lf; :}
				| libmethod_list:l libmethod:m
				{: l.add(m); RESULT = l; :} ;
				
libmethod ::= STATIC type:t ID:mid LP formal_list:formlst RP SEMI
          {: RESULT = new LibraryMethod(t, (String)mid, formlst); :}
          |   STATIC type:t ID:mid LP RP SEMI
          {: RESULT = new LibraryMethod(t, (String)mid, new ArrayList<Formal>()); :}
          |   STATIC VOID ID:mid LP formal_list:formlst RP SEMI
          {: RESULT = new LibraryMethod((Type)(new PrimitiveType(midleft, DataTypes.VOID)), (String)mid, formlst); :}  
          |   STATIC VOID ID:mid LP RP SEMI
          {: RESULT = new LibraryMethod((Type)(new PrimitiveType(midleft, DataTypes.VOID)), (String)mid, new ArrayList<Formal>()); :} 
          ; 
            
            