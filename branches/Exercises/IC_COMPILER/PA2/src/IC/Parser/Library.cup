package IC.Parser;

import IC.AST.*;
import IC.*;
import java.util.*;

/* Terminals */
terminal RB, LB, COMMA, RP, LP, LCBR, RCBR, SEMI;
terminal CLASS, CLASS_ID;
terminal String ID;
terminal STATIC, VOID, INT, STRING, BOOLEAN;

/* Non-Terminals */
nonterminal LibraryMethod libmethod;
nonterminal List<Method> libmethod_list;

nonterminal Formal formals;
nonterminal List<Formal> formals_list;

nonterminal ICClass libic;
nonterminal Type type;

start with libic;

type ::= VOID:t
         {: RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.VOID); :}
         | STRING:t
         {: RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.STRING); :}
         | INT:t
         {: RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.INT); :}
         | BOOLEAN:t
         {: RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.BOOLEAN); :}
         | type:t LB RB
         {: t.incrementDimension(); :}
         ;

formals_list ::= formals:l
				{: List<Formal> lf = new ArrayList<Formal>(); lf.add(l); RESULT=lf;  :}
				| formals_list:l COMMA formals:m
				{: l.add(m); RESULT = l; :};

formals ::= type:t ID:n
        {: RESULT = new Formal(t, n); :};

libic ::= CLASS:c CLASS_ID LCBR libmethod_list:l RCBR
{: RESULT = new ICClass(((Token)c).getLine(),"Library",new ArrayList<Field>(),l); :};

libmethod_list ::= libmethod:l
				{: List<Method> lf = new ArrayList<Method>(); lf.add(l); RESULT=lf; :}
				| libmethod_list:l libmethod:m
				{: l.add(m); RESULT = l; :};
				
libmethod ::= STATIC type:t ID:n LP formals_list:f RP SEMI 
              {: RESULT = new LibraryMethod(t,n,f); :}
              | STATIC type:t ID:n LP RP SEMI
              {: RESULT = new LibraryMethod(t,n,new ArrayList<Formal>()); :}
              ;
            
            