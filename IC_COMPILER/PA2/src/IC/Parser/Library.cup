package IC.Parser;

import IC.AST.*;

parser code  {:
	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}


/* Terminals */
terminal RB, LB, COMMA, RP, LP, LCBR, RCBR, SEMI;
terminal CLASS, CLASS_ID, ID;
terminal STATIC, VOID, INT, STRING, BOOLEAN;

/* Non-Terminals */
non terminal LibraryMethod libmethod;
non terminal List<LibraryMethod> libmethod_list;

non terminal Formal formals;
non terminal List<Formal> formals_list;

non terminal ICClass libic;
non terminal type, brackets, arrtype;

type ::= VOID | STRING | INT | BOOLEAN;
brackets ::= LB RB | brackets LB RB;
arrtype ::= type | arrtype brackets;

formals_list ::= formals:l
				{: RESULT = new ArrayList<Formal>(l); :}
				| formals_list:l COMMA formals:m
				{: l.add(m); RESULT = l; :};

formals ::= arrtype:t ID:n
        {: RESULT = Formal(t, n); :};

libic ::= CLASS:c CLASS_ID LCBR libmethod_list:l RCBR
{: RESULT = new ICClass(c.getLine(),"Library",new ArrayList<Field>(),l); }

libmethod_list ::= libmethod:l
				{: RESULT = new ArrayList<LibraryMethod>(l); :}
				| libmethod_list:l libmethod:m
				{: l.add(m); RESULT = l; :};
				
libmethod ::= STATIC arrtype:t ID:n LP formals_list:f RP SEMI 
              {: RESULT = new LibraryMethod(t,n,f); :}
            | STATIC arrtype:t ID:n LP RP SEMI
              {: RESULT = new LibraryMethod(t,n,new ArrayList<Formal>()); :};
            
            