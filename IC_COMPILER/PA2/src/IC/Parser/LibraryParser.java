
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 07 19:26:44 IST 2012
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import IC.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 07 19:26:44 IST 2012
  */
public class LibraryParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LibraryParser() {super();}

  /** Constructor which sets the default scanner. */
  public LibraryParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibraryParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\005\003\000\002\005\005\000\002\004\004\000" +
    "\002\006\007\000\002\003\003\000\002\003\004\000\002" +
    "\002\011\000\002\002\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\014\005\001\002\000\004\002\040\001" +
    "\002\000\004\015\006\001\002\000\004\011\007\001\002" +
    "\000\004\017\011\001\002\000\006\012\036\017\011\001" +
    "\002\000\012\020\015\021\017\022\013\023\016\001\002" +
    "\000\006\012\ufff7\017\ufff7\001\002\000\006\005\uffff\016" +
    "\uffff\001\002\000\006\005\021\016\020\001\002\000\006" +
    "\005\000\016\000\001\002\000\006\005\ufffd\016\ufffd\001" +
    "\002\000\006\005\ufffe\016\ufffe\001\002\000\004\010\023" +
    "\001\002\000\004\004\022\001\002\000\006\005\ufffc\016" +
    "\ufffc\001\002\000\014\007\027\020\015\021\017\022\013" +
    "\023\016\001\002\000\006\006\032\007\033\001\002\000" +
    "\006\005\021\016\031\001\002\000\006\006\ufffb\007\ufffb" +
    "\001\002\000\004\013\030\001\002\000\006\012\ufff4\017" +
    "\ufff4\001\002\000\006\006\ufff9\007\ufff9\001\002\000\012" +
    "\020\015\021\017\022\013\023\016\001\002\000\004\013" +
    "\034\001\002\000\006\012\ufff5\017\ufff5\001\002\000\006" +
    "\006\ufffa\007\ufffa\001\002\000\004\002\ufff8\001\002\000" +
    "\006\012\ufff6\017\ufff6\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\006\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\011\003\007" +
    "\001\001\000\004\002\036\001\001\000\004\007\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\025\005\023\007\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\034\007\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibraryParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibraryParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibraryParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LibraryParser$actions {
  private final LibraryParser parser;

  /** Constructor */
  CUP$LibraryParser$actions(LibraryParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LibraryParser$do_action(
    int                        CUP$LibraryParser$act_num,
    java_cup.runtime.lr_parser CUP$LibraryParser$parser,
    java.util.Stack            CUP$LibraryParser$stack,
    int                        CUP$LibraryParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibraryParser$result;

      /* select the action based on the action number */
      switch (CUP$LibraryParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // libmethod ::= STATIC type ID LP RP SEMI 
            {
              LibraryMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).value;
		 RESULT = new LibraryMethod(t,n,new ArrayList<Formal>()); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("libmethod",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // libmethod ::= STATIC type ID LP formals_list RP SEMI 
            {
              LibraryMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		 RESULT = new LibraryMethod(t,n,f); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("libmethod",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-6)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // libmethod_list ::= libmethod_list libmethod 
            {
              List<Method> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		List<Method> l = (List<Method>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		LibraryMethod m = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 l.add(m); RESULT = l; 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("libmethod_list",1, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // libmethod_list ::= libmethod 
            {
              List<Method> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		LibraryMethod l = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 List<Method> lf = new ArrayList<Method>(); lf.add(l); RESULT=lf; 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("libmethod_list",1, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // libic ::= CLASS CLASS_ID LCBR libmethod_list RCBR 
            {
              ICClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		List<Method> l = (List<Method>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		 RESULT = new ICClass(((Token)c).getLine(),"Library",new ArrayList<Field>(),l); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("libic",4, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formals ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new Formal(t, n); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("formals",2, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formals_list ::= formals_list COMMA formals 
            {
              List<Formal> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		List<Formal> l = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Formal m = (Formal)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 l.add(m); RESULT = l; 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("formals_list",3, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formals_list ::= formals 
            {
              List<Formal> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Formal l = (Formal)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 List<Formal> lf = new ArrayList<Formal>(); lf.add(l); RESULT=lf;  
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("formals_list",3, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		 t.incrementDimension(); RESULT = t; 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.BOOLEAN); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= INT 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.INT); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= STRING 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.STRING); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= VOID 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(((Token)t).getLine(), DataTypes.VOID); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= libic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		ICClass start_val = (ICClass)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		RESULT = start_val;
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibraryParser$parser.done_parsing();
          return CUP$LibraryParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

