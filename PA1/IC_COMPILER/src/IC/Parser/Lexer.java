/* The following code was generated by JFlex 1.4.3 on 11/11/12 11:09 PM */

package IC.Parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/11/12 11:09 PM from the specification file
 * <tt>IC.lex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STATE_COMMENT = 4;
  public static final int STATE_INLINE_COMMENT = 6;
  public static final int STATE_STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  1,  0,  3,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 47, 49,  0,  0, 43, 46,  0,  8,  9, 42, 40, 36, 41, 37, 11, 
    13, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0, 38, 45, 39, 44,  0, 
     0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  6, 50,  7,  0, 10, 
     0, 18, 34, 16, 27, 21, 29, 30, 31, 28, 15, 35, 17, 15, 24, 33, 
    15, 15, 20, 19, 22, 23, 32, 25, 26, 15, 15,  4, 48,  5,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\12\15\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\0\1\27\1\30\1\31\1\32\2\0\1\33\1\0"+
    "\1\34\15\13\1\35\4\13\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\12\13"+
    "\1\51\2\13\1\52\12\13\1\53\1\13\1\54\1\55"+
    "\1\56\2\13\1\57\2\13\1\60\6\13\1\61\1\62"+
    "\1\63\2\13\1\64\1\65\1\66\1\67\3\13\1\70"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\320\0\320\0\320"+
    "\0\320\0\320\0\320\0\u0104\0\u0138\0\u016c\0\u01a0\0\u01d4"+
    "\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\320\0\320\0\320\0\u0478"+
    "\0\320\0\320\0\320\0\320\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\320\0\u05b0\0\320\0\320\0\u05e4\0\u0618\0\320"+
    "\0\u064c\0\320\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u01d4"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\320\0\320\0\320\0\320"+
    "\0\320\0\320\0\320\0\320\0\320\0\320\0\320\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u01d4\0\u0bfc\0\u0c30\0\u01d4\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u01d4"+
    "\0\u0e6c\0\u01d4\0\u01d4\0\u01d4\0\u0ea0\0\u0ed4\0\u01d4\0\u0f08"+
    "\0\u0f3c\0\u01d4\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u10a8\0\u10dc\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u1110\0\u1144\0\u1178\0\u01d4\0\u01d4\0\u01d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\0\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\20\1\23\1\24\1\25\1\26\1\20\1\27\1\30"+
    "\2\20\1\31\1\32\2\20\1\33\1\20\1\34\1\20"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\0\1\5"+
    "\1\53\1\54\57\53\1\55\1\56\1\0\52\5\1\57"+
    "\12\5\1\60\62\5\77\0\1\61\36\0\1\62\25\0"+
    "\2\15\63\0\1\16\60\0\1\17\1\0\30\17\32\0"+
    "\1\20\1\0\30\20\32\0\1\20\1\0\5\20\1\63"+
    "\17\20\1\64\2\20\32\0\1\20\1\0\11\20\1\65"+
    "\16\20\32\0\1\20\1\0\12\20\1\66\15\20\32\0"+
    "\1\20\1\0\11\20\1\67\16\20\32\0\1\20\1\0"+
    "\5\20\1\70\10\20\1\71\11\20\32\0\1\20\1\0"+
    "\10\20\1\72\12\20\1\73\4\20\32\0\1\20\1\0"+
    "\11\20\1\74\1\20\1\75\14\20\32\0\1\20\1\0"+
    "\23\20\1\76\4\20\32\0\1\20\1\0\14\20\1\77"+
    "\4\20\1\100\6\20\32\0\1\20\1\0\6\20\1\101"+
    "\21\20\32\0\1\20\1\0\25\20\1\102\2\20\32\0"+
    "\1\20\1\0\10\20\1\103\14\20\1\104\2\20\67\0"+
    "\1\105\63\0\1\106\63\0\1\107\72\0\1\110\54\0"+
    "\1\111\74\0\1\112\3\0\1\53\1\0\57\53\31\0"+
    "\1\113\1\0\1\114\30\0\1\115\1\116\14\0\1\60"+
    "\50\0\1\61\2\117\61\61\12\0\1\20\1\0\6\20"+
    "\1\120\21\20\32\0\1\20\1\0\14\20\1\121\13\20"+
    "\32\0\1\20\1\0\14\20\1\122\13\20\32\0\1\20"+
    "\1\0\6\20\1\123\1\20\1\124\17\20\32\0\1\20"+
    "\1\0\12\20\1\125\15\20\32\0\1\20\1\0\7\20"+
    "\1\126\20\20\32\0\1\20\1\0\12\20\1\127\15\20"+
    "\32\0\1\20\1\0\13\20\1\130\14\20\32\0\1\20"+
    "\1\0\20\20\1\131\7\20\32\0\1\20\1\0\15\20"+
    "\1\132\12\20\32\0\1\20\1\0\5\20\1\133\22\20"+
    "\32\0\1\20\1\0\20\20\1\134\7\20\32\0\1\20"+
    "\1\0\12\20\1\135\15\20\32\0\1\20\1\0\5\20"+
    "\1\136\22\20\32\0\1\20\1\0\20\20\1\137\7\20"+
    "\32\0\1\20\1\0\11\20\1\140\16\20\32\0\1\20"+
    "\1\0\25\20\1\141\2\20\32\0\1\20\1\0\7\20"+
    "\1\142\20\20\32\0\1\20\1\0\12\20\1\143\15\20"+
    "\32\0\1\20\1\0\22\20\1\144\5\20\32\0\1\20"+
    "\1\0\12\20\1\145\15\20\32\0\1\20\1\0\20\20"+
    "\1\146\7\20\32\0\1\20\1\0\13\20\1\147\14\20"+
    "\32\0\1\20\1\0\11\20\1\150\16\20\32\0\1\20"+
    "\1\0\11\20\1\151\16\20\32\0\1\20\1\0\11\20"+
    "\1\152\16\20\32\0\1\20\1\0\7\20\1\153\20\20"+
    "\32\0\1\20\1\0\5\20\1\154\22\20\32\0\1\20"+
    "\1\0\5\20\1\155\22\20\32\0\1\20\1\0\7\20"+
    "\1\156\20\20\32\0\1\20\1\0\17\20\1\157\10\20"+
    "\32\0\1\20\1\0\6\20\1\160\21\20\32\0\1\20"+
    "\1\0\5\20\1\161\22\20\32\0\1\20\1\0\7\20"+
    "\1\162\20\20\32\0\1\20\1\0\20\20\1\163\7\20"+
    "\32\0\1\20\1\0\12\20\1\164\15\20\32\0\1\20"+
    "\1\0\20\20\1\165\7\20\32\0\1\20\1\0\14\20"+
    "\1\166\13\20\32\0\1\20\1\0\10\20\1\167\17\20"+
    "\32\0\1\20\1\0\14\20\1\170\13\20\32\0\1\20"+
    "\1\0\11\20\1\171\16\20\32\0\1\20\1\0\11\20"+
    "\1\172\16\20\32\0\1\20\1\0\27\20\1\173\32\0"+
    "\1\20\1\0\11\20\1\174\16\20\32\0\1\20\1\0"+
    "\14\20\1\175\13\20\32\0\1\20\1\0\23\20\1\176"+
    "\4\20\32\0\1\20\1\0\4\20\1\177\23\20\32\0"+
    "\1\20\1\0\22\20\1\200\5\20\32\0\1\20\1\0"+
    "\14\20\1\201\13\20\32\0\1\20\1\0\17\20\1\202"+
    "\10\20\32\0\1\20\1\0\6\20\1\203\21\20\32\0"+
    "\1\20\1\0\13\20\1\204\14\20\32\0\1\20\1\0"+
    "\7\20\1\205\20\20\32\0\1\20\1\0\14\20\1\206"+
    "\13\20\32\0\1\20\1\0\11\20\1\207\16\20\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\7\11\21\1\3\11\1\1\4\11\2\1\1\0"+
    "\1\1\1\0\1\11\1\1\2\11\2\0\1\11\1\0"+
    "\1\11\22\1\13\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	private Token token(int type){
		return new Token(type,yyline,yycolumn);
	}

	private Token token(int type, Object value){
		return new Token(type,yyline,yycolumn,value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* ignore */
          }
        case 59: break;
        case 41: 
          { return token(sym.NEW);
          }
        case 60: break;
        case 33: 
          { return token(sym.LAND);
          }
        case 61: break;
        case 3: 
          { return token(sym.RCBR);
          }
        case 62: break;
        case 17: 
          { return token(sym.MINUS);
          }
        case 63: break;
        case 36: 
          { string.append('\t');
          }
        case 64: break;
        case 40: 
          { yybegin(STATE_INLINE_COMMENT);
          }
        case 65: break;
        case 31: 
          { return token(sym.GTE);
          }
        case 66: break;
        case 25: 
          { throw new LexicalError("Unterminated string at end of line.", yyline);
          }
        case 67: break;
        case 52: 
          { return token(sym.LENGTH);
          }
        case 68: break;
        case 13: 
          { return token(sym.DOT);
          }
        case 69: break;
        case 12: 
          { return token(sym.COMMA);
          }
        case 70: break;
        case 16: 
          { return token(sym.PLUS);
          }
        case 71: break;
        case 7: 
          { return token(sym.RP);
          }
        case 72: break;
        case 56: 
          { return token(sym.EXTENDS);
          }
        case 73: break;
        case 35: 
          { return token(sym.LOR);
          }
        case 74: break;
        case 50: 
          { return token(sym.FALSE);
          }
        case 75: break;
        case 44: 
          { return token(sym.TRUE);
          }
        case 76: break;
        case 20: 
          { return token(sym.GT);
          }
        case 77: break;
        case 39: 
          { string.append('\\');
          }
        case 78: break;
        case 47: 
          { return token(sym.VOID);
          }
        case 79: break;
        case 21: 
          { return token(sym.LT);
          }
        case 80: break;
        case 48: 
          { return token(sym.CLASS);
          }
        case 81: break;
        case 43: 
          { return token(sym.ELSE);
          }
        case 82: break;
        case 27: 
          { yybegin(YYINITIAL);
          }
        case 83: break;
        case 15: 
          { return token(sym.ASSIGN);
          }
        case 84: break;
        case 4: 
          { return token(sym.LB);
          }
        case 85: break;
        case 55: 
          { return token(sym.RETURN);
          }
        case 86: break;
        case 42: 
          { return token(sym.INT);
          }
        case 87: break;
        case 22: 
          { return token(sym.LNEG);
          }
        case 88: break;
        case 45: 
          { return token(sym.THIS);
          }
        case 89: break;
        case 38: 
          { string.append('\"');
          }
        case 90: break;
        case 11: 
          { return token(sym.ID, yytext());
          }
        case 91: break;
        case 14: 
          { return token(sym.SEMI);
          }
        case 92: break;
        case 53: 
          { return token(sym.STATIC);
          }
        case 93: break;
        case 19: 
          { return token(sym.MOD);
          }
        case 94: break;
        case 9: 
          { return token(sym.INTEGER, Integer.parseInt(yytext()));
          }
        case 95: break;
        case 57: 
          { return token(sym.BOOLEAN);
          }
        case 96: break;
        case 29: 
          { return token(sym.IF);
          }
        case 97: break;
        case 24: 
          { string.append(yytext());
          }
        case 98: break;
        case 23: 
          { string.setLength(0); string.append('"'); yybegin(STATE_STRING);
          }
        case 99: break;
        case 18: 
          { return token(sym.MULTIPLY);
          }
        case 100: break;
        case 6: 
          { return token(sym.LP);
          }
        case 101: break;
        case 32: 
          { return token(sym.LTE);
          }
        case 102: break;
        case 34: 
          { return token(sym.NEQUAL);
          }
        case 103: break;
        case 30: 
          { return token(sym.EQUAL);
          }
        case 104: break;
        case 51: 
          { return token(sym.BREAK);
          }
        case 105: break;
        case 46: 
          { return token(sym.NULL);
          }
        case 106: break;
        case 28: 
          { yybegin(STATE_COMMENT);
          }
        case 107: break;
        case 58: 
          { return token(sym.CONTINUE);
          }
        case 108: break;
        case 49: 
          { return token(sym.WHILE);
          }
        case 109: break;
        case 5: 
          { return token(sym.RB);
          }
        case 110: break;
        case 37: 
          { string.append("\\n");
          }
        case 111: break;
        case 10: 
          { return token(sym.CLASS_ID, yytext());
          }
        case 112: break;
        case 26: 
          { string.append('"'); yybegin(YYINITIAL); return token(sym.QUOTE,string.toString());
          }
        case 113: break;
        case 2: 
          { return token(sym.LCBR);
          }
        case 114: break;
        case 54: 
          { return token(sym.STRING);
          }
        case 115: break;
        case 8: 
          { return token(sym.DIVIDE);
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	
	return new Token(sym.EOF,yyline,yycolumn);

 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
